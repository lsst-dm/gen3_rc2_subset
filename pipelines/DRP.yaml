description: The DRP pipeline specialized for the HSC instrument
instrument: lsst.obs.subaru.HyperSuprimeCam
imports:
  - $PIPE_TASKS_DIR/pipelines/DRP.yaml
tasks:
  skyCorr:
    class: lsst.pipe.drivers.skyCorrection.SkyCorrectionTask
  jointcal:
    # The jointcal package depends on obs_subaru, not the other way around, so
    # it's not great to have this here, but it's the least-bad temporary spot
    # for this information (which is specific to both Gen3 and HSC) until we
    # RFC-approve a better home for it.
    class: lsst.jointcal.JointcalTask
    config:
      # Disable photometry because we don't need it (FGCM takes care of that)
      # and it's broken in Gen3 (DM-29884).  Also disable color terms because
      # jointcal warns if that's true but doPhotometry=False.  It would be
      # better to disable this via config (DM-29885), but it's hard to make
      # that compatible with the jointcal tests because jointcal depends on
      # obs_subaru.
      doPhotometry: false
      applyColorTerms: false
      python: |
        # This override is temporary until DM-29008.
        from lsst.utils import getPackageDir
        config.load(os.path.join(getPackageDir("jointcal"), "tests", "config", "config-gen3.py"))
  # The FGCM configurations below are appropriate specifically for RC2; like
  # the jointcal information above, this is the least-bad place for it, because
  # Gen3 HSC is unlikely to mean anything other than RC2 until we have a new
  # home for these that lets us separate generic HSC from RC2 (and ci_hsc has
  # its own customization).
  fgcmBuildStarsTable:
    class: lsst.fgcmcal.fgcmBuildStarsTable.FgcmBuildStarsTableTask
    config:
      minPerBand: 1
      densityCutMaxPerPixel: 1500
      primaryBands: ['i', 'r', 'g', 'z', 'y', 'N921']
      doReferenceMatches: True
  detection:
    class: lsst.pipe.tasks.multiBand.DetectCoaddSourcesTask
    config:
      detection.thresholdValue: 250

  fgcmFitCycle:
    class: lsst.fgcmcal.fgcmFitCycle.FgcmFitCycleTask
    config:
      minCcdPerExp: 1
      useRepeatabilityForExpGrayCutsDict: {'g': True, 'r': True, 'i': True, 'z': True, 'y': True, 'N921': True}
      autoPhotometricCutNSig: 10.0
      doMultipleCycles: true
      multipleCyclesFinalCycleNumber: 4
      randomSeed: 89234
      outfileBase: 'fgcmFitCycleRC2'
      bands: ['g', 'r', 'i', 'z', 'N921', 'y']
      fitBands: ['g', 'r', 'i', 'z', 'N921', 'y']
      maxIterBeforeFinalCycle: 50
      expGrayPhotometricCutDict:
        g: -0.05
        r: -0.05
        i: -0.05
        z: -0.05
        N921: -0.05
        y: -0.05
      expGrayHighCutDict:
        g: 0.10
        r: 0.10
        i: 0.10
        z: 0.10
        N921: 0.10
        y: 0.10
      aperCorrFitNBins: 0
      minStarPerExp: 100
      expVarGrayPhotometricCutDict:
        g: 0.0025
        r: 0.0025
        i: 0.0025
        z: 0.0025
        N921: 0.005
        y: 0.0025
      minExpPerNight: 2
      python: |
        from lsst.fgcmcal import Sedterm, Sedboundaryterm
        config.sedboundaryterms.data = {'gr': Sedboundaryterm(primary='g', secondary='r'),
                                        'ri': Sedboundaryterm(primary='r', secondary='i'),
                                        'iz': Sedboundaryterm(primary='i', secondary='z'),
                                        'zy': Sedboundaryterm(primary='z', secondary='y'),
                                        'N921z': Sedboundaryterm(primary='N921', secondary='z')}
        config.sedterms.data = {'g': Sedterm(primaryTerm='gr', secondaryTerm='ri', constant=1.6),
                                'r': Sedterm(primaryTerm='gr', secondaryTerm='ri', constant=0.9),
                                'i': Sedterm(primaryTerm='ri', secondaryTerm='iz', constant=1.0),
                                'z': Sedterm(primaryTerm='iz', secondaryTerm='zy', constant=1.0),
                                'y': Sedterm(primaryTerm='zy', secondaryTerm='iz', constant=0.25,
                                             extrapolated=True, primaryBand='y', secondaryBand='z',
                                             tertiaryBand='i'),
                                'N921': Sedterm(primaryTerm='N921z', constant=0.5)}
  fgcmOutputProducts:
    class: lsst.fgcmcal.fgcmOutputProducts.FgcmOutputProductsTask
    config:
      doRefcatOutput: false
      cycleNumber: 4
  makeWarp:
    class: lsst.pipe.tasks.makeCoaddTempExp.MakeWarpTask
    config:
      python: >
        from lsst.pipe.tasks.selectImages import PsfWcsSelectImagesTask;
        config.select.retarget(PsfWcsSelectImagesTask)
  forcedPhotCcd:
    class: lsst.meas.base.forcedPhotCcd.ForcedPhotCcdTask
    config:
      # The application of external calibrations doesn't work with Gen3 now (DM-17062)
      doApplyExternalPhotoCalib: false
      doApplyExternalSkyWcs: false
      doApplySkyCorr: false
subsets:
  fgcm:
    subset:
      - fgcmBuildStarsTable
      - fgcmFitCycle
      - fgcmOutputProducts
    description: >
      Subset that includes all FGCM tasks.
  singleFrame:
    subset:
      - isr
      - characterizeImage
      - calibrate
      - writeSourceTable
      - transformSourceTable
      - consolidateSourceTable
      - consolidateVisitSummary
      - skyCorr
    description: >
      Set of tasks for complete single frame processing. Analogous to
      SingleFrameDriver.
  simpleSingleFrame:
    subset:
      - isr
      - characterizeImage
      - calibrate
    description: >
       A simplified single frame pipeline to make the quantum graph more readable
  multiVisit:
    subset: []
    description: |
      The multiVisit subset defined in pipe_tasks' DRP.yaml is not safe to
      use on HSC for various reasons; use 'step1', 'step2', and 'step3' subsets
      instead.  It may be re-enabled in the future.
  step1:
    subset:
      - isr
      - characterizeImage
      - calibrate
      - writeSourceTable
      - transformSourceTable
      - consolidateSourceTable
      - consolidateVisitSummary
      - skyCorr
      - fgcmBuildStarsTable
      - fgcmFitCycle
      - fgcmOutputProducts
      - jointcal
      - makeWarp
      - assembleCoadd
    description: |
      Tasks that can be run together to start the DRP pipeline.

      These should never be run with 'tract' or 'patch' as part of the data ID
      expression if any later steps will also be run, because downstream steps
      require full visits and 'tract' and 'patch' constraints will always
      select partial visits that overlap that region.

      This includes FGCM because it's configured here to run in "global" mode,
      which means one should not use 'tract' expression to constrain it, and if
      one _did_ run it with a tract constraint (which would be a common
      occurrence if it was included in any later step), it would be fed the
      wrong (partial-visit) inputs to its 'background' connection.

      This subset is considered a workaround for missing middleware and task
      functionality.  It may be removed in the future.
  step2:
    subset:
      - makeWarp
      - assembleCoadd
    description: >
      Tasks that can be run together, but only after the 'step1'.

      These should be run with explicit 'tract' constraints essentially all the
      time, because otherwise quanta will be created for jobs with only partial
      visit coverage.

      This subset cannot be run at the same time as the tasks in the 'step3'
      at present because assembleCoadd has no good way to communicate to
      downstream tasks that there is no coadd for a particular patch+band
      combination because there no input data.  Creating a new QuantumGraph
      after all possible coadds have been built works around this.

      This subset is considered a workaround for missing middleware and task
      functionality.  It may be removed in the future.
  coadd_measurement:
    subset:
      - detection

      - mergeDetections
      - deblend
      - measure
      - mergeMeasurements
  forced_objects:
    subset:
      - forcedPhotCcd
      - forcedPhotCoadd
      - transformObjectTable
      - writeObjectTable
      - consolidateObjectTable
    description: >
      Tasks that can be run together, but only after the 'step1' and 'step2'
      subsets.

      Adding a 'tract' constraint to the data ID expression when running this
      subset should have no effect on the result, if 'step2' was run with a
      tract constraint.

      It is expected that many forcedPhotCcd quanta will "normally" fail when
      running this subset, but this isn't a problem right now because there
      are no tasks downstream of it.  If other tasks regularly fail or we add
      tasks downstream of forcedPhotCcd, these subsets or the tasks will need
      additional changes.

      This subset is considered a workaround for missing middleware and task
      functionality.  It may be removed in the future.
